#!/usr/bin/env python

import time
import logging
import sys
from typing import Union
import threading
import json
import argparse
from pdb import set_trace as bp
from rdflib import Namespace, Graph, Literal, URIRef

from bacpypes.core import run as bacpypes_run

from brickbacnet.discovery import BacnetDiscovery
from brickbacnet.brickserver import BrickServer
from brickbacnet.namespaces import BACNET, BRICK_NS_TEMPLATE, OWL, RDF, RDFS
from brickbacnet.connector import Connector
from brickbacnet.common import make_src_id, make_obj_id
from brickbacnet.sqlite_wrapper import SqliteWrapper

def str2ilist(s):
    s.replace(' ', '')
    return [int(c) for c in s.split(',')]

def str2slist(s):
    s.replace(' ', '')
    return [str(c) for c in s.split(',')]

class BacnetConn(object):
    def __init__(self):
        parser = argparse.ArgumentParser(
            description="BACnet connector with Brick Server or something similar.",
        )
        parser.add_argument(
            "command", help="The command to run", choices=["discovery", "connector"],
        )
        args = parser.parse_args(sys.argv[1:2])
        getattr(self, 'run_' + args.command)()

    def run_discovery(self):
        parser = argparse.ArgumentParser(
            description="Record changes to the repository. The priority of conflicting configuration aparameters is `b2b_config.json` > `argument parameters` > `default values`.",
        )
        parser = self._add_shared_args(parser)
        parser.add_argument(
            "--bacnet-devices-file",
            help="The target file to store bacnet devices' metadata.",
            default="results/bacnet_devices.json",
        )
        parser.add_argument(
            "--bacnet-objects-file",
            help="The target file to store bacnet objects' metadata.",
            default="results/bacnet_objects.json",
        )
        parser.add_argument(
            "--register-brickserver",
            action="store_const",
            const=True,
            default=False,
            help="Regsiter discovered objects in a Brick Server",
        )
        parser.add_argument(
            "--register-plastser",
            action="store_const",
            const=True,
            default=False,
            help="Regsiter discovered objects in a Plaster Web Service (TODO)",
        )
        parser.add_argument(
            "--base-namespace",
            default='http://example.com#',
            help="The name space associated with discovered entities",
            type=str,
        )
        parser.add_argument(
            "--brick-version",
            default='1.0.3',
            help="Brick's version",
            type=str,
        )

        # Set parameters
        args = parser.parse_args(sys.argv[2:])
        self.BRICK = Namespace(BRICK_NS_TEMPLATE.format(version=args.brick_version))
        with open(args.b2b_config, 'r') as fp:
            config = json.load(fp)
        self.property_filters = config["property_filters"]
        self.sqlite_db = SqliteWrapper(config['sqlite_db'])

        # Set up threads for BACpypes
        bacnet_discovery = BacnetDiscovery(args.bacpypes_ini, config, self.sqlite_db)
        time.sleep(1)
        run_thread = threading.Thread(target=bacpypes_run)
        run_thread.daemon = True
        run_thread.start()

        # Discover BACnet devices
        devices = bacnet_discovery.discover_devices()
        with open(args.bacnet_devices_file, "w") as fp:
            json.dump(devices, fp, indent=2, sort_keys=True)

        # Discover BACnet objects for identified devices
        if args.target_devices:
            target_device_ids = args.target_devices
            target_devices = {dev_id: devices[int(dev_id)] for dev_id in target_device_ids}
        else:
            target_devices = devices
        device_objs = bacnet_discovery.discover_objects(target_devices)
        with open(args.bacnet_objects_file, "w") as fp:
            json.dump(device_objs, fp, indent=2, sort_keys=True)

        if args.register_brickserver:
            self.ds_if = BrickServer(config['brickserver']['hostname'],
                                           config['brickserver']['jwt_token'])
        else:
            self.ds_if = DummyServer() #TODO

        # Serialize the discovered resources into an RDF graph
        g = self.make_brick_graph(target_devices, device_objs)
        self.update_uuids(g)
        #self.uuid_dev_id_map, self.uuid_src_id_map = self.create_uuid_maps(g)
        #json.dump(self.uuid_dev_id_map, open('results/uuid_dev_id_map.json', 'w'), indent=2)
        #json.dump(self.uuid_src_id_map, open('results/uuid_src_id_map.json', 'w'), indent=2)
        #TODO: This needs to be changed to sql interface.

        # Register the identifeid devies and objects to Brick Server
        if args.register_brickserver:
            self.ds_if.register_graph(g)

    def update_uuids(self, g):

        # map devices
        qstr = """
        select ?entity ?dev_id where {
            ?entity a bacnet:BACnet_Device.
            ?dev bacnet:device_id ?dev_id.
        }
        """
        for [entity_id, dev_id] in g.query(qstr):
            self.sqlite_db.update_dev_property(
                dev_id=dev_id,
                prop='uuid',
                val=entity_id,
            )

        # map objects
        qstr = """
        select ?entity ?obj_type ?obj_instance ?dev_id where {
            ?entity a brick:Point.
            ?entity bacnet:object_type ?obj_type.
            ?entity bacnet:instance ?obj_instance.
            ?dev brick:hasPoint ?entity.
            ?dev bacnet:device_id ?dev_id.
        }
        """
        res = g.query(qstr)
        for [entity_id, obj_type, obj_instance, dev_id] in res:
            self.sqlite_db.update_obj_property(
                dev_id=dev_id,
                obj_instance=obj_instance,
                prop='uuid',
                val=entity_id,
            )

    def create_uuid_maps(self, g):

        # map devices
        qstr = """
        select ?entity ?dev_id where {
            ?entity a bacnet:BACnet_Device.
            ?dev bacnet:device_identifier ?dev_id.
        }
        """
        uuid_dev_id_map = {}
        for [entity_id, dev_id] in g.query(qstr):
            uuid_dev_id_map[entity_id] = dev_id

        # map objects
        qstr = """
        select ?entity ?obj_type ?obj_instance ?dev_id where {
            ?entity a brick:Point.
            ?entity bacnet:object_type ?obj_type.
            ?entity bacnet:instance ?obj_instance.
            ?dev brick:hasPoint ?entity.
            ?dev bacnet:device_identifier ?dev_id.
        }
        """
        res = g.query(qstr)
        uuid_src_id_map = {}
        for [entity_id, obj_type, obj_instance, dev_id] in res:
            obj_id = make_obj_id(obj_type, obj_instance)
            src_id = make_src_id(dev_id, obj_id)
            uuid_src_id_map[entity_id] = src_id

        return uuid_dev_id_map, uuid_src_id_map

    def _get_default_graph(self):
        g = Graph()
        g.bind('brick', self.BRICK)
        g.bind('bacnet', BACNET)
        return g

    def get_uri(self, src_id, entity_type: Union[str, URIRef]):
        # TODO: Lookup src_id and see if uuid exists. Return the existing one if exists.

        # If not exists:
        uri = URIRef(self.ds_if.create_entity(str(entity_type)))
        return uri

    def make_brick_graph(self, devices, device_objs, target_file='results/b2b.ttl'):
        g = self._get_default_graph()
        for dev_props in devices.values():
            dev_id = dev_props['device_id']
            dev_uri = self.get_uri(dev_id, BACNET.BACnet_Device)
            g.add((dev_uri, RDF.type, BACNET.BACnet_Device))
            for prop, val in dev_props.items():
                if prop in self.property_filters:
                    continue
                g.add((dev_uri, BACNET[prop], Literal(val)))
            for obj_props in device_objs[str(dev_id)].values():
                obj_uri = self.get_uri(obj_props, 'Point')
                g.add((obj_uri, RDF.type, self.BRICK.Point))
                g.add((dev_uri, self.BRICK.hasPoint, obj_uri))
                for prop, val in obj_props.items():
                    if prop in self.property_filters:
                        continue
                    g.add((obj_uri, BACNET[prop], Literal(val)))
        g.serialize(target_file, format='turtle')
        return g

    def _add_shared_args(self, parser):
        parser.register('type','ilist', str2ilist)
        parser.register('type','slist', str2slist)
        parser.add_argument(
            "--target-devices",
            default=None,
            help="Indicate the target devices for which you'd like to get objects. By default, brickbacnet queries all the discoverable devices. Comma-separated integers are accepted (e.g., --target-devices 505,506",
            type='slist',
        )
        parser.add_argument(
            "--b2b-config",
            help="The location of brickbacnet config file in JSON.",
            default="configs/b2b_config.json"
        )
        parser.add_argument(
            "--bacpypes-ini",
            help="The location of BACpypes.ini",
            default="configs/BACpypes.ini",
        )
        return parser



    def run_connector(self):
        parser = argparse.ArgumentParser(
            description="Run a Connector for BACnet and Brick Server",
        )
        parser = self._add_shared_args(parser)
        parser.add_argument(
            "--run-actuation-server",
            action="store_const",
            const=True,
            default=False,
            help="Regsiter discovered objects in a Brick Server",
        )
        args = parser.parse_args(sys.argv[2:])
        config = json.load(open(args.b2b_config))
        config['connector']['bacnet_dev_ids'] = config.get('bacnet_dev_ids', args.target_devices)
        assert config['connector']['bacnet_dev_ids']

        ds_if = BrickServer(config['brickserver']['hostname'],
                            config['brickserver']['jwt_token'],
                            )

        connector = Connector(config.get('bacpypes_ini', args.bacpypes_ini),
                              ds_if=ds_if,
                              config=config['connector'],
                              )
        if args.run_actuation_server:
            raise NotImplementedError()

        connector.read_all_devices_forever()


if __name__ == "__main__":
    BacnetConn()
